<?php

// $Id$

/**
 *  Implementation of hook_menu().
 */
function og_management_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    
    $items[] = array(
      'path' => 'admin/settings/og_management',
      'title' => 'Og Management Settings',
      'description' => 'Decide the default settings for the og management module.',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('og_management_settings_form'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM, // optional
    );
    
    $items[] = array(
      'path' => 'admin/og/og_subscribers',
      'title' => 'Subscriber Management',
      'description' => 'Manage subscribers',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('og_management_subscribers_form', 'dummy_variable'),
      'access' => user_access('manage subscribers'),
      'type' => MENU_NORMAL_ITEM, // optional
    );

  }
  else {
    global $user;
    $items[] = array(
      'path' => 'my_group_management',
      'access' => user_access('manage own groups'),
      'title' => 'Manage my groups',
      'description' => 'Manage your subscriptions to all of the sites\' open groups.',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('og_management_subscribers_form', $user->uid),
      'type' => MENU_NORMAL_ITEM, // optional
    );
  }
  return $items;
}

/**
 * Settings page for og_management
 */
function og_management_settings_form() {
  $form = array();

  $form['og_management_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles'),
    '#description' => t('Choose which roles should be manageable with this module'),
    '#options' => user_roles(1),
    '#default_value' => variable_get('og_management_roles', user_roles(1)),
  );
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_perm().
 */
function og_management_perm() {
  return array('manage subscribers', 'manage own groups');
}

/**
 * Custom form for bulk adding/removing subscribers from groups
 */
function og_management_subscribers_form($uid = NULL, $form_values = NULL) {

  // we want to be able to do two main things with this form
  // 1.  add multiple users to different organic groups
  //     this may require us to store the students to be added to a temporary queue
  //     in the database, and processed using a cron job later
  // 2.  remove users from organic groups
  //     again we may need to set this up as a cron job
  //     need to test with hundreds of users and dozens of groups
  
  $form = array();

  if ($uid == 'dummy_variable') {  
    // load the user roles into the form
    if (!isset($form_values['roles'])) {
      $form = og_management_load_roles();
    }
    else {
      $form = og_management_load_roles($form_values);
    }
    
    $form['order_by'] = array(
      '#type' => 'select',
      '#title' => t('Order by'),
      '#description' => t('Choose in what order to sort the subscribers.'),
      '#options' => array('uid ascending', 'uid descending', 'name ascending', 'name descending', 'joined date ascending', 'joined date descending'),
      '#default_value' => 0,
    );
    
    $form['select_roles'] = array(
      '#type' => 'submit',
      '#value' => 'Filter',  
      '#submit' => FALSE,
    );
    
    // not sure if I should bother adding the below element.  It seems dangerous...
    /*$form['make_admin'] = array(
      '#type' => 'checkbox',
      '#default_value' => 0,
      '#title' => t('Make the subscribers selected below admins of the groups'),
    );*/
    $uid = NULL;
  }

  // load the subscriber and group information for the form
  $subform = og_management_load_subscribers($form['roles']['#value'], $form_values, $uid);
  
  
  // if there are groups
  if (is_array($subform)) {
    // load the subscribers into the form with the correct role
    $form = array_merge_recursive($subform, $form);
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Submit changes',
    );
  
    // This part is important!
    $form['#multistep'] = TRUE;
    $form['#redirect'] = FALSE;
  }
  // otherwise change the submit element
  else {
    // delete the rest of the form
    unset($form);
    // re-add the submit button so the theme function doesn't freak out
    $form['submit'] = array(
      '#type' => 'value',
      '#value' => 'No groups',
    );
  }

  return $form;
}

/**
 *  Custom submit handler for our gradebook node type
 */
function og_management_subscribers_form_submit($form_id, $form) {
  // will need to modify what we do depending on which operation occurs
  if ($form['op'] == 'Submit changes') {
    // verify we aren't in some situation where we have no users or no groups
    if (is_array($form['subscribers_groups'])) {
      // are we editing all user's subscriptions?
      if (count($form['subscribers_groups']) > 1) {
        $message = "The groups of the subscribers have been updated";
      }
      // or just one user
      else {
        $message = "Your group subscriptions have been updated.";
      }
      foreach ($form['subscribers_groups'] as $uid => $groups) {
        if (is_array($groups)) {
          foreach ($groups as $gid => $update) {
            // delete users from groups if they have been removed
            if ($update == 0) {
              og_delete_subscription($gid, $uid);
            }
            // otherwise add them to the group
            else {
              // the current user won't necessarily have permission to join a group
              if (!isset($form['uid']['#value'])) {
                // $form['make_admin']
                og_save_subscription($gid, $uid,  array('is_admin' => 0, 'is_active' => 1));
              }
              // so we use the regular subscription request in this case
              else {
                global $user;
                og_subscribe_user($gid, $user);
              }
            }
          }
        }
      }
    }
    drupal_set_message($message);
  }
}

/**
 * Theme the form above so that the rows and columns work out properly
 */
function theme_og_management_subscribers_form($form) {
  if ($form['submit']['#value'] === 'No groups') {
    return '';
  }

  if (isset($form['uid']['#value'])) {
    $uid = $form['uid']['#value'];
  }
  // add the form specific css
  drupal_add_css(drupal_get_path('module', 'og_management') .'/og_management.css');
  
  // wrap the form so it is easier to theme
  $output = '<div class="og_management-form">';
  
  // add the rest of the form
  if (!$uid) {
    $output .= drupal_render($form['roles']) . drupal_render($form['order_by']) . drupal_render($form['select_roles']) . drupal_render($form['submit']); // . drupal_render($form['make_admin']);
  }
  else {
    $output .= drupal_render($form['submit']);
  }
  
  // create the header for the left column
  $header_left = array('Subscriber');
  
  $rows_left = array();
  // add the subscribers
  
  foreach ($form['subscriber'] as $key => $subscriber) {
    if (is_numeric($key) && isset($subscriber['#value'])) {
      $rows_left[$key] = array($subscriber['#value']);
    }
  }
  
  // create the header for the right column
  $header_right = array();
  
  // add the extra elements to each header cell
  foreach ($form['groups'] as $key => $group) {
    if (is_numeric($key) && isset($group['#value'])) {
      $header_right[$key] = $group['#value'];
    }
  }
  
  
  // build the subscriber group data
  $rows_right = array();
  
  // loop through each user checking each group
  foreach ($form['subscribers_groups'] as $key => $user) {
    if (is_numeric($key)) {
      $rows_right[$key] = array();
      foreach ($user as $nid => $group) {
        if (is_numeric($nid) && isset($group['#value'])) {
          $rows_right[$key][] = drupal_render($group);
        }
      }
    }
  }
  
  // add the left column
  $output .= '<table class="form-information"><tr><td valign="top">';
  $output .= theme('table', $header_left, $rows_left);
  $output .= '</td><td valign="top">';
  
  // theme the right column as a table inside a scrollable div
  $output .= '<div class="scrollable" style="clear: none;">'. theme('table', $header_right, $rows_right);
  
  // add the group pager inside the table to make it more obvious it is a pager for the groups
  $output .= theme_pager(array(), 50, 5);

  // add the rest of the table
  $output .= '</td></tr></table></div>';
  
  // add the end of the form wrapper
  $output .= '</div>';
  
  // add the subscriber pager
  // todo: make this pager more obviously for the students.
  $output .= theme_pager(array(), 50, 4);
  
  $output .= drupal_render($form);

  return $output;
}

/**
 * Load the roles for display on the form
 */
function og_management_load_roles($form_values = NULL) {
  $form = array();
  $user_roles = variable_get('og_management_roles', array_keys(user_roles(1)));
  $all_roles = user_roles(1);
  
  // check the previous roles
  if (!$form_values['roles']) {
    $roles = array_intersect($user_roles, array_keys($all_roles));
  }
  else {
    $roles = $form_values['roles'];
  }
  
  $options = array_combine($user_roles, $all_roles);

  $form['roles'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Choose which role to use to filter this form.'),
    '#options' => $options,
    '#value' => $roles,
    '#required' => TRUE,
    '#weight' => -10,
  );
  
  return $form;
}

/**
 * Load the subscribers for the form
 */
function og_management_load_subscribers($roles, $form_values, $uid = NULL) {
  
  $form = array();
  
  // just a place holder for our actual data
  $form['subscriber'] = array(
    '#type' => 'value',
    '#tree' => TRUE,
  );
  
  // create a place holder to store the subscribed group info for our users
  $form['subscribers_groups'] = array(
    '#type' => 'value',
    '#tree' => TRUE,
  );
  
  // create a place holder for the groups
  $form['groups'] = array(
    '#type' => 'value',
    '#tree' => TRUE,
  );
  
  // if we are loading all users then we want to be able to see all groups
  if (!$uid) {
    $selective = "(0,1,2,3)";
  }
  // otherwise only see the groups the current user can join
  else {
    $selective = "(0,1)";
  }
  
  // find all of the current groups
  // we assume og module exists here because it is a dependency of this module
  $result = pager_query("SELECT n.title, n.nid FROM {node} n INNER JOIN {og} o ON o.nid = n.nid WHERE o.selective IN %s ORDER BY o.nid ASC", 50, 5, NULL, $selective);
  
  // keep track of the groups shown on this page
  $groups = array();

  // array('uid ascending', 'uid descending', 'name ascending', 'name descending', 'joined date ascending', 'joined date descending')
  // choose which way to sort the users
  switch ($form_values['order_by']) {
    case 1:
      $order_by = 'uid DESC';
      break;
    case 2:
      $order_by = 'name ASC';
      break;
    case 3:
      $order_by = 'name DESC';
      break;
    case 4:
      $order_by = 'created ASC';
      break;
    case 5:
      $order_by = 'created DESC';
      break;
    case 0:
    default:
      $order_by = 'uid ASC';
      break;  
  }
  
  while ($row = db_fetch_array($result)) {
    $groups[] = $row['nid'];
    // generate the form element
    $form['groups'][] = array(
      '#type' => 'value',
      '#value' => l($row['title'], 'node/'. $row['nid'], $attributes = array('class' => 'group')),
    );
  }

  // load the users if the uid is null
  if (!$uid ) {  
    // create the WHERE clause of the query
    $user_roles = 'IN ('. implode(',', $roles) .')';
    
    // if 'authenticated user' is one of the roles, then all non-anonymous users should be returned.
    if (in_array(2, $roles)) {
      $user_roles = '<> 0';
    }
    
    // query the database and use a largish pager id to prevent collisions with other pager queries.
    // there HAS to be a better way to avoid collions!

    $result = pager_query("SELECT u.name, u.uid FROM {users} u INNER JOIN {users_roles} r ON r.uid = u.uid WHERE r.rid %s ORDER BY %s", 50, 4, NULL, $user_roles, $order_by);
  }
  else {
    $result = db_query("SELECT u.name, u.uid FROM {users} u WHERE u.uid = %d", $uid);
    // add the user form value to keep track of the current user uid
    $form['uid'] = array(
      '#type' => 'value',
      '#value' => $uid,
    );
  }
  
  // keep track of the users for later
  $users = array();

  // create all of the subscriber form elements
  while ($row = db_fetch_array($result)) {
    // store this information for later
    $users[] = $row['uid'];
    
    // generate the form element
    $form['subscriber'][] = array(
      '#type' => 'value',
      '#value' => l($row['name'], 'user/'. $row['uid'], $attributes = array('class' => 'subscriber')),
    );
  }
  
  // make sure their are some Organic groups on the site
  if (!empty($groups)) {
    $group_nids = implode(',', $groups);
  }
  // otherwise display a message to the user so they know what went wrong
  else {
    drupal_set_message(t('Either there are no groups yet at all for your site, or if you are managing your own groups, there are no groups you are able to join.'));
    return FALSE;
  }
  
  // generate the information on the individual users from the database
  foreach ($users as $uid) {
    // hold a spot in the forms array for each user
    $form['subscribers_groups'][$uid] = array(
      '#type' => 'value',
      '#tree' => TRUE,
    );
    // query the database for the groups the user is an active member of
    $result = db_query("SELECT o.is_active, o.is_admin, o.nid FROM {og_uid} o WHERE o.nid IN (%s) AND o.uid = %d ORDER BY o.nid ASC", $group_nids, $uid);
    
    // keep track of the groups to which the user belongs
    $user_groups = array();
    
    while ($row = db_fetch_array($result)) {
      $user_groups[] = $row['nid'];
      
      if ($row['is_admin'] == 1) {
        // admin users can't be touched with this form
        // we do this to display a checkbox, but leave the name blank so it doesn't get picked up by the forms api
        $form['subscribers_groups'][$uid][$row['nid']] = array(
          '#type' => 'markup',
          '#value' => '<input type="checkbox" value="1" checked="checked" class="form-checkbox" disabled="disabled" />',
        );
      }
      else {
        // create a checked box for each of these 
        $form['subscribers_groups'][$uid][$row['nid']] = array(
          '#type' => 'checkbox',
          '#default_value' => $row['is_active'],
        );
      }
    }
    
    foreach (array_diff($groups, $user_groups) as $nid) {
      $form['subscribers_groups'][$uid][$nid] = array(
        '#type' => 'checkbox',
        '#default_value' => 0,
      );
    }
    
    // at this point I need to sort the columns by the nid as php doesn't seem to automatically sort arrays with numerical keys.
    ksort($form['subscribers_groups'][$uid]);
  }
  
  return $form;
}
